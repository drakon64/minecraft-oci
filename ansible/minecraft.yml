# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook.json

- hosts: minecraft

  vars:
    memtotal_b: "{{ ansible_memtotal_mb * 1048576 }}"
    final_server_overrides: "{% if global_overrides.server is defined and overrides.server is defined %}{{ server | combine(global_overrides.server, overrides.server, recursive=True) }}{% elif global_overrides.server is defined %}{{ server | combine(global_overrides.server, recursive=True) }}{% elif overrides.server is defined %}{{ server | combine(overrides.server, recursive=True) }}{% else %}{{ server }}{% endif %}"
    final_luckperms_overrides: "{% if global_overrides.luckperms is defined and overrides.luckperms is defined %}{{ luckperms | combine(global_overrides.luckperms, overrides.luckperms, recursive=True) }}{% elif global_overrides.luckperms is defined %}{{ luckperms | combine(global_overrides.luckperms, recursive=True) }}{% elif overrides.luckperms is defined %}{{ luckperms | combine(overrides.luckperms, recursive=True) }}{% else %}{{ luckperms }}{% endif %}"
    final_luckperms_groups: "{% if global_overrides.luckperms_groups is defined and overrides.luckperms_groups is defined %}{{ combine(global_overrides.luckperms_groups, overrides.luckperms_groups, recursive=True) }}{% elif global_overrides.luckperms_groups is defined %}{{ global_overrides.luckperms_groups }}{% elif overrides.luckperms_groups is defined %}{{ overrides.luckperms_groups }}{% endif %}"
    final_luckperms_users: "{% if global_overrides.luckperms_users is defined and overrides.luckperms_users is defined %}{{ combine(global_overrides.luckperms_users, overrides.luckperms_users, recursive=True) }}{% elif global_overrides.luckperms_users is defined %}{{ global_overrides.luckperms_users }}{% elif overrides.luckperms_users is defined %}{{ overrides.luckperms_users }}{% endif %}"

  tasks:
    - name: Configuring sshd # Based on https://infosec.mozilla.org/guidelines/openssh and CIS Benchmarks
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^({{ item.regexp }}|#{{ item.regexp }})"
        line: "{{ item.line }}"
      with_items:
        - {
            regexp: "KexAlgorithms",
            line: "KexAlgorithms curve25519-sha256@libssh.org",
          }
        - {
            regexp: "Ciphers",
            line: "Ciphers chacha20-poly1305@openssh.com",
          }
        - {
            regexp: "MACs",
            line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com",
          }
        - {
            regexp: "AuthenticationMethods",
            line: "AuthenticationMethods publickey",
          }
        - {
            regexp: "LogLevel",
            line: "LogLevel VERBOSE",
          }
        - {
            regexp: "Subsystem sftp",
            line: "Subsystem sftp /usr/libexec/openssh/sftp-server -f AUTHPRIV -l INFO",
          }
        - {
            regexp: "PermitRootLogin",
            line: "PermitRootLogin no",
          }
        - {
            regexp: "UsePrivilegeSeparation",
            line: "UsePrivilegeSeparation sandbox",
          }
        - {
            regexp: "LoginGraceTime",
            line: "LoginGraceTime 1m",
          }
        - {
            regexp: "AllowTcpForwarding",
            line: "AllowTcpForwarding no",
          }
        - {
            regexp: "MaxSessions",
            line: "MaxSessions 4",
          }
        - {
            regexp: "X11Forwarding",
            line: "X11Forwarding no",
          }
        - {
            regexp: "MaxAuthTries",
            line: "MaxAuthTries 4",
          }
      register: sshd

    - name: Checking if SSH short moduli needs disabling
      command: awk '{ if ($5 < 3071) { exit 3 } else { exit 0 } }' /etc/ssh/moduli
      changed_when: moduli.rc == 3
      failed_when:
        - moduli.rc != 0
        - moduli.rc != 3
      register: moduli

    - name: Disabling SSH short moduli
      command: awk -i inplace '$5 >= 3071' /etc/ssh/moduli
      when: moduli.changed

    - name: Restarting sshd
      systemd:
        name: sshd
        state: restarted
      when: sshd.changed or moduli.changed

    - name: Gathering Facts about services
      service_facts:

    - name: Stopping the existing server
      systemd:
        name: minecraft
        state: stopped
      when:
        - ansible_facts.services['minecraft.service'] is defined

    - name: Backing up the existing server
      shell: tar cfO - minecraft | oci os object put --auth instance_principal --bucket-name {{ bucket_name }} --file - --name "minecraft.tar" --force
      args:
        chdir: /opt/minecraft
      when:
        - new_server == true or update_server == true
        - skip_backup == false or continuous_deployment == false

    - name: Applying updates with Uptrack
      command: uptrack-upgrade -y

    - name: Installing updates
      dnf:
        name: "*"
        state: latest
        update_cache: yes

    - name: Setting the timezone
      timezone:
        name: "{{ timezone }}"

    - name: Installing packages
      dnf:
        name:
         - java-17-openjdk-devel
         - jq
         - python36-oci-cli
         - tmux
        state: present
        update_cache: yes

    - name: Creating the minecraft user
      user:
        name: minecraft
        create_home: yes
        home: /opt/minecraft
        shell: /bin/bash

    - name: Checking if the swapfile exists
      stat:
        path: /.swapfile
      register: swapfile

    - name: Turning off swapfile
      command: swapoff /.swapfile
      changed_when: swapoff.rc == 0
      failed_when:
        - swapoff.rc != 0
        - swapoff.rc != 255
      when: swapfile.stat.exists
      register: swapoff

    - name: Removing swapfile
      file:
        path: /.swapfile
        state: absent
      when: swapfile.stat.exists

    - name: Removing the existing server
      file:
        path: /opt/minecraft/server
        state: absent
      when: new_server == true

    - name: Creating the server directory
      file:
        path: /opt/minecraft/server
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755
      when: new_server == true

    - name: Getting the latest Paper build
      shell: curl --silent https://papermc.io/api/v2/projects/paper/versions/{{ version }} | jq ".builds | max"
      register: paper_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Downloading Minecraft Paper server
      get_url:
        url: https://papermc.io/api/v2/projects/paper/versions/{{ version }}/builds/{{ paper_latest.stdout }}/downloads/paper-{{ version }}-{{ paper_latest.stdout }}.jar
        dest: /opt/minecraft/server/server.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Getting the Minecraft server URL
      shell: curl --silent https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.versions[] | select(.id == "{{ version }}") | .url' | xargs -n 1 curl --silent | jq -r .downloads.server.url
      register: vanilla_url
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == true

    - name: Downloading Minecraft server
      get_url:
        url: "{{ vanilla_url.stdout }}"
        dest: /opt/minecraft/server/server.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == true

    - name: Configuring the Minecraft server
      template:
        src: templates/java/server.properties.j2
        dest: /opt/minecraft/server/server.properties
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - restore_backup == false

    - name: Creating the plugin directories
      file:
        path: /opt/minecraft/server/plugins/{{ item }}
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755
      with_items:
        - Chunky
        - CustomCommandPrefix
        - floodgate
        - Geyser-Spigot/packs
        - LuckPerms
      when:
        - restore_backup == false
        - vanilla == false

    - name: Configuring the Paper server
      template:
        src: templates/java/{{ item }}.j2
        dest: /opt/minecraft/server/{{ item }}
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - bukkit.yml
        - commands.yml
        - spigot.yml
        - paper.yml
        - plugins/Chunky/config.yml
        - plugins/floodgate/config.yml
        - plugins/Geyser-Spigot/config.yml
        - plugins/LuckPerms/config.yml
      when:
        - restore_backup == false
        - vanilla == false

    - name: Copying the server permissions files
      copy:
        src: files/java/{{ item }}.json
        dest: /opt/minecraft/server/
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - ops
        - whitelist
      when:
        - restore_permissions == true
        - restore_backup == false

    - name: Getting the latest Chunky release
      shell: curl --silent https://ci.codemc.io/job/pop4959/job/Chunky/lastSuccessfulBuild/api/json | jq -r '.artifacts[0].fileName'
      register: chunky_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest LuckPerms release
      shell: curl --silent https://ci.lucko.me/job/LuckPerms/lastSuccessfulBuild/api/json | jq -r '.artifacts[0].fileName'
      register: luckperms_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest TabTPS release
      shell: curl --silent https://api.github.com/repos/jpenilla/TabTPS/releases/latest | jq -r '.assets[].browser_download_url | select(contains("spigot"))'
      register: tabtps_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Downloading plugins
      get_url:
        url: "{{ item.url }}"
        dest: /opt/minecraft/server/plugins/{{ item.dest }}
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
       - { url: https://ci.opencollab.dev/job/GeyserMC/job/Geyser/job/master/lastSuccessfulBuild/artifact/bootstrap/spigot/target/Geyser-Spigot.jar, dest: Geyser-Spigot.jar }
       - { url: https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/lastSuccessfulBuild/artifact/spigot/target/floodgate-spigot.jar, dest: floodgate-spigot.jar }
       - { url: https://ci.opencollab.dev/job/GeyserMC/job/GeyserOptionalPack/job/master/lastSuccessfulBuild/artifact/GeyserOptionalPack.mcpack, dest: Geyser-Spigot/packs/ }
       - { url: "https://ci.codemc.io/view/Author/job/pop4959/job/Chunky/lastSuccessfulBuild/artifact/bukkit/build/libs/{{ chunky_latest.stdout }}", dest: "Chunky.jar" }
       - { url: "https://ci.lucko.me/job/LuckPerms/1389/artifact/bukkit/loader/build/libs/{{ luckperms_latest.stdout }}", dest: "LuckPerms.jar" }
       - { url: "{{ tabtps_latest.stdout }}", dest: tabtps.jar }
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Downloading the CustomCommandPrefix plugin
      copy:
        src: files/CustomCommandPrefix-1.0.jar
        dest: /opt/minecraft/server/plugins/CustomCommandPrefix.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Configuring the CustomCommandPrefix plugin
      copy:
        content: "prefix: '?'"
        dest: /opt/minecraft/server/plugins/CustomCommandPrefix/config.yml
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - restore_backup == false
        - vanilla == false

    - name: Creating LuckPerms directories
      file:
        path: /opt/minecraft/server/plugins/LuckPerms/yaml-storage/{{ item }}
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755
      with_items:
       - "{% if final_luckperms_groups is defined %}groups{% endif %}"
       - "{% if final_luckperms_users is defined %}users{% endif %}"
      when:
       - final_luckperms_groups is defined or final_luckperms_users is defined
       - final_luckperms_overrides['storage-method'] == "yaml"
       - restore_backup == false
       - vanilla == false

    - name: Configuring the LuckPerms users
      template:
        src: templates/java/plugins/LuckPerms/luckperms.yml.j2
        dest: /opt/minecraft/server/plugins/LuckPerms/yaml-storage/users/{{ item.uuid }}.yml
      with_items: "{{ final_luckperms_users }}"
      when:
       - final_luckperms_users is defined
       - final_luckperms_overrides['storage-method'] == "yaml"
       - restore_backup == false
       - vanilla == false

    - name: Configuring the LuckPerms groups
      template:
        src: templates/java/plugins/LuckPerms/luckperms.yml.j2
        dest: /opt/minecraft/server/plugins/LuckPerms/yaml-storage/groups/{{ item.name }}.yml
      with_items: "{{ final_luckperms_groups }}"
      when:
       - final_luckperms_groups is defined
       - final_luckperms_overrides['storage-method'] == "yaml"
       - restore_backup == false
       - vanilla == false

    - name: Creating the ViaVersion plugin directory
      file:
        path: /opt/minecraft/server/plugins/ViaVersion
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755
      when:
        - new_server == true or update_server == true
        - use_viaversion == true
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest ViaVersion release
      shell: curl --silent "https://api.github.com/repos/ViaVersion/ViaVersion/releases/latest" | jq -r '.assets[].browser_download_url'
      register: viaversion_latest
      when:
        - new_server == true or update_server == true
        - use_viaversion == true
        - restore_backup == false
        - vanilla == false

    - name: Downloading the ViaVersion plugin
      get_url:
        url: "{{ viaversion_latest.stdout }}"
        dest: /opt/minecraft/server/plugins/ViaVersion.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - use_viaversion == true
        - restore_backup == false
        - vanilla == false

    - name: Configuring the ViaVersion plugin
      template:
        src: templates/java/plugins/ViaVersion/config.yml.j2
        dest: /opt/minecraft/server/plugins/ViaVersion/
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - use_viaversion == true
        - restore_backup == false
        - vanilla == false

    - name: Removing the ViaVersion plugin
      file:
        path: /opt/minecraft/server/plugins/{{ item }}
        state: absent
      with_items:
        - ViaVersion.jar
        - ViaVersion/
      when: use_viaversion == false

    - name: Downloading Jolokia
      maven_artifact:
        group_id: org.jolokia
        artifact_id: jolokia-jvm
        dest: /opt/minecraft/server/jolokia-jvm.jar
        owner: minecraft
        group: minecraft
        mode: 0644

    - name: Downloading the server backup
      command: oci os object get --auth instance_principal --bucket-name {{ bucket_name }} --file minecraft.tar --name minecraft.tar{%if backup_version is defined %} --version-id {{ backup_version }}{% endif %}
      args:
        chdir: /opt/minecraft
      when: restore_backup == true

    - name: Restoring the server backup
      unarchive:
        src: /opt/minecraft/minecraft.tar
        dest: /opt/minecraft/
        owner: minecraft
        group: minecraft
        mode: u=rwX,g=rX,o=rX
        remote_src: yes
      when: restore_backup == true

    - name: Removing the downloaded backup
      file:
        path: /opt/minecraft/server.tar
        state: absent
      when: restore_backup == true

    - name: Copying scripts and systemd units
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.owner }}"
        mode: "{{ item.mode }}"
      with_items:
        - {
            src: "files/scripts/dnf-reboot.sh",
            dest: "/opt/minecraft/dnf-reboot.sh",
            owner: "minecraft",
            mode: "0755",
          }
        - {
            src: "templates/scripts/backup.sh.j2",
            dest: "/opt/minecraft/backup.sh",
            owner: "minecraft",
            mode: "0755",
          }
        - {
            src: "templates/scripts/heap-utilization.sh.j2",
            dest: "/opt/minecraft/heap-utilization.sh",
            owner: "minecraft",
            mode: "0755",
          }
        - {
            src: "files/scripts/tick-rate.sh",
            dest: "/opt/minecraft/",
            owner: "minecraft",
            mode: "0744",
          }
        - {
            src: "files/scripts/query.sh",
            dest: "/opt/minecraft/",
            owner: "minecraft",
            mode: "0744",
          }
        - {
            src: "files/scripts/disk-utilization.sh",
            dest: "/opt/minecraft/",
            owner: "minecraft",
            mode: "0755",
          }
        - {
            src: "templates/systemd/minecraft.service.j2",
            dest: "/etc/systemd/system/minecraft.service",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/minecraft-backup.service.j2",
            dest: "/etc/systemd/system/minecraft-backup.service",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/minecraft-backup.timer.j2",
            dest: "/etc/systemd/system/minecraft-backup.timer",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/dnf-upgrade.service",
            dest: "/etc/systemd/system/dnf-upgrade.service",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/dnf-upgrade.timer",
            dest: "/etc/systemd/system/dnf-upgrade.timer",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/uptrack-upgrade.service",
            dest: "/etc/systemd/system/uptrack-upgrade.service",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/uptrack-upgrade.timer",
            dest: "/etc/systemd/system/uptrack-upgrade.timer",
            owner: "root",
            mode: "0644",
          }
        - {
            src: "files/systemd/oci-disk-utilization.service",
            dest: "/etc/systemd/system/oci-disk-utilization.service",
            owner: "root",
            mode: "0644",
          }

    - name: Copying monitoring systemd units
      template:
        src: "templates/systemd/monitor.{{ item.src }}.j2"
        dest: "/etc/systemd/system/{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
      with_items:
       - {
            src: "service",
            dest: "disk-utilization-monitor.service",
            description: "Disk Utilization",
            execstart: "disk-utilization.sh"
         }
       - {
            src: "timer",
            dest: "disk-utilization-monitor.timer",
            description: "Disk Utilization",
            timer: "*:*:0"
         }
       - {
            src: "service",
            dest: "heap-utilization-monitor.service",
            description: "Heap Utilization",
            execstart: "heap-utilization.sh"
         }
       - {
            src: "timer",
            dest: "heap-utilization-monitor.timer",
            description: "Heap Utilization",
            timer: "*:*:*"
         }
       - {
            src: "service",
            dest: "tick-rate-monitor.service",
            description: "Tick Rate",
            execstart: "tick-rate.sh"
         }
       - {
            src: "timer",
            dest: "tick-rate-monitor.timer",
            description: "Tick Rate",
            timer: "*:*:*"
         }
       - {
            src: "service",
            dest: "query-monitor.service",
            description: "Query",
            execstart: "query.sh"
         }
       - {
            src: "timer",
            dest: "query-monitor.timer",
            description: "Query",
            timer: "*:0/10:0"
         }

    - name: Copying continuous deployment script and systemd units
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode }}"
      with_items:
        - {
            src: "templates/scripts/continuous-deployment.sh.j2",
            dest: "/opt/minecraft/continuous-deployment.sh",
            mode: "0744",
          }
        - {
            src: "files/systemd/minecraft-continuous-deployment.service",
            dest: "/etc/systemd/system/minecraft-continuous-deployment.service",
            mode: "0644",
          }
        - {
            src: "files/systemd/minecraft-continuous-deployment.timer",
            dest: "/etc/systemd/system/minecraft-continuous-deployment.timer",
            mode: "0644",
          }
      when: continuous_deployment == true

    - name: Accepting the Minecraft Server EULA
      copy:
        content: eula=true
        dest: /opt/minecraft/server/eula.txt
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true
        - restore_backup == false
        - eula == true

    - name: Copying firewall rule
      template:
        src: templates/minecraft.xml.j2
        dest: /etc/firewalld/services/minecraft.xml
        owner: root
        group: root
        mode: 0644
      register: firewall

    - name: Reloading firewalld
      command: firewall-cmd --reload
      when: firewall.changed

    - name: Allowing Minecraft through the firewall
      firewalld:
        service: minecraft
        state: enabled
        permanent: yes
        immediate: yes

    - name: Creating directory for the SELinux module
      file:
        path: /opt/minecraft/selinux
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755

    - name: Copying SELinux module
      copy:
        src: files/minecraft.te
        dest: /opt/minecraft/selinux/
        owner: minecraft
        group: minecraft
        mode: 0644
      register: selinux

    - name: Compiling SELinux module
      command: checkmodule -M -m -o minecraft.mod minecraft.te
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Packaging SELinux module
      command: semodule_package -o minecraft.pp -m minecraft.mod
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Loading SELinux module
      command: semodule -i minecraft.pp
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Starting the systemd units
      systemd:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        enabled: "{{ item.enabled }}"
        daemon_reload: yes
      with_items:
        - { name: "minecraft.service", state: "started", enabled: "yes" }
        - { name: "minecraft-backup.timer", state: "{% if continuous_deployment == false %}started{% else %}stopped{% endif %}", enabled: "{% if continuous_deployment == false %}true{% else %}false{% endif %}" }
        - { name: "dnf-upgrade.timer", state: "started", enabled: "yes" }
        - { name: "uptrack-upgrade.timer", state: "started", enabled: "yes" }
        - { name: "disk-utilization-monitor.timer", state: "started", enabled: "yes" }
        - { name: "heap-utilization-monitor.timer", state: "started", enabled: "yes" }
        - { name: "tick-rate-monitor.timer", state: "started", enabled: "yes" }
        - { name: "query-monitor.timer", state: "started", enabled: "yes" }

    - name: Starting the continuous deployment systemd timer
      systemd:
        name: minecraft-continuous-deployment.timer
        state: started
        enabled: yes
        daemon_reload: yes
      when: continuous_deployment == true
