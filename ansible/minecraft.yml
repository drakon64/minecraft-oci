# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook.json

- hosts: minecraft

  vars:
    memtotal_b: "{{ ansible_memtotal_mb * 1048576 }}"
    final_server_overrides: "{% if global_overrides.server is defined and overrides.server is defined %}{{ server | combine(global_overrides.server, overrides.server, recursive=True) }}{% elif global_overrides.server is defined %}{{ server | combine(global_overrides.server, recursive=True) }}{% elif overrides.server is defined %}{{ server | combine(overrides.server, recursive=True) }}{% else %}{{ server }}{% endif %}"
    final_luckperms_overrides: "{% if global_overrides.luckperms.config is defined and overrides.luckperms.config is defined %}{{ luckperms.config | combine(global_overrides.luckperms.config, overrides.luckperms.config, recursive=True) }}{% elif global_overrides.luckperms.config is defined %}{{ luckperms.config | combine(global_overrides.luckperms.config, recursive=True) }}{% elif overrides.luckperms.config is defined %}{{ luckperms.config | combine(overrides.luckperms.config, recursive=True) }}{% else %}{{ luckperms.config }}{% endif %}"
    final_luckperms_groups: "{% if global_overrides.luckperms.groups is defined and overrides.luckperms.groups is defined %}{{ combine(global_overrides.luckperms.groups, overrides.luckperms.groups, recursive=True) }}{% elif global_overrides.luckperms.groups is defined %}{{ global_overrides.luckperms.groups }}{% elif overrides.luckperms.groups is defined %}{{ overrides.luckperms.groups }}{% endif %}"
    final_luckperms_users: "{% if global_overrides.luckperms.users is defined and overrides.luckperms.users is defined %}{{ combine(global_overrides.luckperms.users, overrides.luckperms.users, recursive=True) }}{% elif global_overrides.luckperms.users is defined %}{{ global_overrides.luckperms.users }}{% elif overrides.luckperms.users is defined %}{{ overrides.luckperms.users }}{% endif %}"

  tasks:
    - name: Configuring sshd # Based on https://infosec.mozilla.org/guidelines/openssh and CIS Benchmarks
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^({{ item.regexp }}|#{{ item.regexp }})"
        line: "{{ item.line }}"
      with_items:
        - {
            regexp: "KexAlgorithms",
            line: "KexAlgorithms curve25519-sha256@libssh.org",
          }
        - { regexp: "Ciphers", line: "Ciphers chacha20-poly1305@openssh.com" }
        - {
            regexp: "MACs",
            line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com",
          }
        - {
            regexp: "AuthenticationMethods",
            line: "AuthenticationMethods publickey",
          }
        - { regexp: "LogLevel", line: "LogLevel VERBOSE" }
        - {
            regexp: "Subsystem sftp",
            line: "Subsystem sftp /usr/libexec/openssh/sftp-server -f AUTHPRIV -l INFO",
          }
        - { regexp: "PermitRootLogin", line: "PermitRootLogin no" }
        - {
            regexp: "UsePrivilegeSeparation",
            line: "UsePrivilegeSeparation sandbox",
          }
        - { regexp: "LoginGraceTime", line: "LoginGraceTime 1m" }
        - { regexp: "AllowTcpForwarding", line: "AllowTcpForwarding no" }
        - { regexp: "MaxSessions", line: "MaxSessions 4" }
        - { regexp: "X11Forwarding", line: "X11Forwarding no" }
        - { regexp: "MaxAuthTries", line: "MaxAuthTries 4" }
      register: sshd

    - name: Checking if SSH short moduli needs disabling
      command: awk '{ if ($5 < 3071) { exit 3 } else { exit 0 } }' /etc/ssh/moduli
      changed_when: moduli.rc == 3
      failed_when:
        - moduli.rc != 0
        - moduli.rc != 3
      register: moduli

    - name: Disabling SSH short moduli
      command: awk -i inplace '$5 >= 3071' /etc/ssh/moduli
      when: moduli.changed

    - name: Restarting sshd
      systemd:
        name: sshd
        state: restarted
      when: sshd.changed or moduli.changed

    - name: Gathering Facts about services
      service_facts:

    - name: Stopping the existing server
      systemd:
        name: minecraft
        state: stopped
      when:
        - ansible_facts.services['minecraft.service'] is defined

    - name: Backing up the existing server
      systemd:
        name: minecraft-backup
        state: started
      when:
        - new_server or update_server
        - skip_backup == false
        - continuous_deployment == false

    - name: Applying updates with Uptrack
      command: uptrack-upgrade -y

    - name: Enabling EPEL
      yum_repository:
        name: ol8_developer_EPEL
        baseurl: https://yum$ociregion.$ocidomain/repo/OracleLinux/OL8/developer/EPEL/$basearch/
        description: Oracle Linux $releasever EPEL Packages for Development ($basearch)
        gpgcheck: yes
        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        enabled: yes
        file: oracle-epel-ol8

    - name: Installing updates
      dnf:
        name: "*"
        state: latest
        update_cache: yes

    - name: Setting the timezone
      timezone:
        name: "{{ timezone }}"

    - name: Installing packages
      dnf:
        name:
          - git
          - java-17-openjdk-headless
          - jq
          - borgbackup
          - python36-oci-cli
          - tmux
        state: present
        update_cache: yes

    - name: Installing mcstatus
      pip:
        name: mcstatus
        state: latest

    - name: Installing nginx
      dnf:
        name: nginx
        state: present
      when:
        - use_bluemap

    - name: Installing certbot
      dnf:
        name:
          - certbot
          - python3-certbot-nginx
        state: present
      when:
        - use_bluemap
        - bluemap_certbot.use

    - name: Creating the minecraft user
      user:
        name: minecraft
        create_home: yes
        home: /opt/minecraft
        shell: /bin/bash

    - name: Setting permissions for the Minecraft directory
      file:
        path: /opt/minecraft
        mode: 0755

    - name: Checking the size of the swapfile
      stat:
        path: /.swapfile
      register: swapfile

    - name: Turning off swapfile
      command: swapoff /.swapfile
      changed_when: swapoff.rc == 0
      failed_when:
        - swapoff.rc != 0
        - swapoff.rc != 255
      when: swapfile.stat.size != memtotal_b
      register: swapoff

    - name: Removing the existing swapfile
      file:
        path: /.swapfile
        state: absent
      when: swapfile.stat.size != memtotal_b

    - name: Creating swapfile to match system memory
      command: fallocate -l {{ memtotal_b }} /.swapfile
      when: swapfile.stat.size != memtotal_b

    - name: Formatting swapfile
      command: mkswap /.swapfile
      when: swapfile.stat.size != memtotal_b

    - name: Changing vm.swappiness to 1 #Â Oracle Linux recommendation for SSD's
      sysctl:
        name: vm.swappiness
        value: 1
        reload: yes

    - name: Turning on swapfile
      command: swapon /.swapfile
      when: swapfile.stat.size != memtotal_b

    - name: Removing the existing server
      file:
        path: /opt/minecraft/server
        state: absent
      when: new_server

    - name: Creating the server directory
      file:
        path: /opt/minecraft/server
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755

    - name: Creating the server backup directory
      file:
        path: /opt/minecraft/backup
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755
      when: continuous_deployment == false

    - name: Initialising the server backup repository
      command: borg init -e none /opt/minecraft/backup
      changed_when: borg.rc == 0
      failed_when:
        - borg.rc != 0
        - borg.rc != 2
      register: borg
      when: continuous_deployment == false
      become_user: minecraft

    - name: Getting the latest Paper build
      shell: curl --silent https://papermc.io/api/v2/projects/paper/versions/{{ version }} | jq ".builds | max"
      register: paper_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false
        - paper_build is not defined

    - name: Downloading Minecraft Paper server
      get_url:
        url: https://papermc.io/api/v2/projects/paper/versions/{{ version }}/builds/{% if paper_build is not defined %}{{ paper_latest.stdout }}{% else %}{{ paper_build }}{% endif %}/downloads/paper-{{ version }}-{% if paper_build is not defined %}{{ paper_latest.stdout }}{% else %}{{ paper_build }}{% endif %}.jar
        dest: /opt/minecraft/server/server.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Getting the Minecraft server URL
      shell: curl --silent https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.versions[] | select(.id == "{{ version }}") | .url' | xargs -n 1 curl --silent | jq -r .downloads.server.url
      register: vanilla_url
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla

    - name: Downloading Minecraft server
      get_url:
        url: "{{ vanilla_url.stdout }}"
        dest: /opt/minecraft/server/server.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla

    - name: Creating the plugin directories
      file:
        path: /opt/minecraft/server/plugins/{{ item.path }}
        state: "{{ item.state }}"
        owner: minecraft
        group: minecraft
        mode: 0755
      with_items:
        - {
            path: BlueMap,
            state: "{% if use_bluemap %}directory{% else %}absent{% endif %}",
          }
        - {
            path: BlueMapFloodgate,
            state: "{% if use_bluemap %}directory{% else %}absent{% endif %}",
          }
        - {
            path: Chunky,
            state: "{% if use_chunky %}directory{% else %}absent{% endif %}",
          }
        - { path: CustomCommandPrefix, state: directory }
        - { path: floodgate, state: directory }
        - { path: Geyser-Spigot/packs, state: directory }
        - { path: TreeAssist/trees, state: directory }
        - { path: LuckPerms, state: directory }
        - {
            path: LuckPerms/json-storage/groups,
            state: "{% if final_luckperms_overrides['storage-method'] == 'json' %}directory{% else %}absent{% endif %}",
          }
        - {
            path: LuckPerms/json-storage/users,
            state: "{% if final_luckperms_overrides['storage-method'] == 'json' %}directory{% else %}absent{% endif %}",
          }
        - {
            path: LuckPerms/yaml-storage/groups,
            state: "{% if final_luckperms_overrides['storage-method'] == 'yaml' %}directory{% else %}absent{% endif %}",
          }
        - {
            path: LuckPerms/yaml-storage/users,
            state: "{% if final_luckperms_overrides['storage-method'] == 'yaml' %}directory{% else %}absent{% endif %}",
          }
        - { path: LPC, state: directory }
        - { path: PlaceholderAPI/expansions, state: directory }
        - {
            path: ViaVersion,
            state: "{% if use_viaversion %}directory{% else %}absent{% endif %}",
          }
      when:
        - restore_backup == false
        - vanilla == false

    - name: Downloading TreeAssist
      git:
        repo: https://github.com/slipcor/TreeAssist.git
        dest: /opt/minecraft/TreeAssist
        depth: 1
        single_branch: yes
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Configuring TreeAssist
      copy:
        src: /opt/minecraft/TreeAssist/src/main/resources/trees
        dest: /opt/minecraft/server/plugins/TreeAssist/
        owner: minecraft
        group: minecraft
        mode: u=rwX,g=rX,o=rX
        remote_src: yes
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Configuring the Minecraft server
      template:
        src: templates/java/{{ item.src }}.j2
        dest: /opt/minecraft/server/{{ item.src }}
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - { src: server.properties, when: "{{ true }}" }
        - { src: bukkit.yml, when: "{{ vanilla == false }}" }
        - { src: commands.yml, when: "{{ vanilla == false }}" }
        - { src: spigot.yml, when: "{{ vanilla == false }}" }
        - { src: paper.yml, when: "{{ vanilla == false }}" }
        - {
            src: plugins/BlueMap/core.conf,
            when: "{{ use_bluemap and vanilla == false }}",
          }
        - {
            src: plugins/BlueMap/plugin.conf,
            when: "{{ use_bluemap and vanilla == false }}",
          }
        - {
            src: plugins/BlueMap/render.conf,
            when: "{{ use_bluemap and vanilla == false }}",
          }
        - {
            src: plugins/BlueMap/webserver.conf,
            when: "{{ use_bluemap and vanilla == false }}",
          }
        - {
            src: plugins/Chunky/config.yml,
            when: "{{ use_chunky and vanilla == false }}",
          }
        - {
            src: plugins/BlueMapFloodgate/config.yml,
            when: "{{ use_bluemap and vanilla == false }}",
          }
        - { src: plugins/floodgate/config.yml, when: "{{ vanilla == false }}" }
        - {
            src: plugins/Geyser-Spigot/config.yml,
            when: "{{ vanilla == false }}",
          }
        - { src: plugins/TreeAssist/config.yml, when: "{{ vanilla == false }}" }
        - {
            src: plugins/TreeAssist/trees/default.yml,
            when: "{{ vanilla == false }}",
          }
        - { src: plugins/LuckPerms/config.yml, when: "{{ vanilla == false }}" }
        - { src: plugins/LPC/config.yml, when: "{{ vanilla == false }}" }
        - {
            src: plugins/ViaVersion/config.yml,
            when: "{{ use_viaversion and vanilla == false }}",
          }
      when:
        - restore_backup == false
        - item.when

    - name: Copying the server permissions files
      copy:
        src: files/java/{{ item }}.json
        dest: /opt/minecraft/server/
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - ops
        - whitelist
      when:
        - restore_permissions
        - restore_backup == false

    - name: Getting the latest KeepChunks release
      shell: curl --silent "https://api.github.com/repos/Geitenijs/KeepChunks/releases/latest" | jq -r '.assets[].browser_download_url'
      register: keepchunks_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest Chunky release
      shell: curl --silent https://ci.codemc.io/job/pop4959/job/Chunky/lastSuccessfulBuild/api/json | jq -r '.artifacts[0].fileName'
      register: chunky_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false
        - use_chunky

    - name: Getting the latest BlueMap release
      shell: curl --silent "https://api.github.com/repos/BlueMap-Minecraft/BlueMap/releases/latest" | jq -r '.assets[].browser_download_url | select(contains("spigot"))'
      register: bluemap_latest
      when:
        - new_server or update_server
        - use_bluemap
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest BlueMap-Floodgate release
      shell: curl --silent "https://api.github.com/repos/TechnicJelle/BlueMapFloodgate/releases" | jq -r '.[0].assets[].browser_download_url'
      register: bluemap_floodgate_latest
      when:
        - new_server or update_server
        - use_bluemap
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest ViaVersion release
      shell: curl --silent "https://api.github.com/repos/ViaVersion/ViaVersion/releases/latest" | jq -r '.assets[].browser_download_url'
      register: viaversion_latest
      when:
        - new_server or update_server
        - use_viaversion
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest TabTPS release
      shell: curl --silent https://api.github.com/repos/jpenilla/TabTPS/releases/latest | jq -r '.assets[].browser_download_url | select(contains("spigot"))'
      register: tabtps_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest FloodgatePlaceholders release
      shell: curl --silent https://api.github.com/repos/rtm516/FloodgatePlaceholders/releases/latest | jq -r '.assets[].browser_download_url'
      register: floodgateplaceholders_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest PlaceholderAPI release
      shell: curl --silent https://ci.extendedclip.com/job/PlaceholderAPI/lastSuccessfulBuild/api/json | jq -r '.artifacts[2].fileName'
      register: placeholderapi_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest LuckPerms release
      shell: curl --silent https://ci.lucko.me/job/LuckPerms/lastSuccessfulBuild/api/json | jq -r '.artifacts[0].fileName'
      register: luckperms_latest
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Downloading plugins
      get_url:
        url: "{{ item.url }}"
        dest: /opt/minecraft/server/plugins/{{ item.dest }}
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - {
            url: https://ci.opencollab.dev/job/GeyserMC/job/Geyser/job/master/lastSuccessfulBuild/artifact/bootstrap/spigot/target/Geyser-Spigot.jar,
            dest: Geyser-Spigot.jar,
            when: "{{ true }}",
          }
        - {
            url: https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/lastSuccessfulBuild/artifact/spigot/target/floodgate-spigot.jar,
            dest: floodgate-spigot.jar,
            when: "{{ true }}",
          }
        - {
            url: https://ci.opencollab.dev/job/GeyserMC/job/GeyserOptionalPack/job/master/lastSuccessfulBuild/artifact/GeyserOptionalPack.mcpack,
            dest: Geyser-Spigot/packs/,
            when: "{{ true }}",
          }
        - {
            url: https://cdn.discordapp.com/attachments/804019242512810034/933402729894801459/TreeAssist.jar, # this is terrible and I hate it
            dest: TreeAssist.jar,
            when: "{{ true }}",
          }
        - {
            url: "{{ keepchunks_latest.stdout }}",
            dest: KeepChunks.jar,
            when: "{{ true }}",
          }
        - {
            url: "{% if use_chunky %}https://ci.codemc.io/view/Author/job/pop4959/job/Chunky/lastSuccessfulBuild/artifact/bukkit/build/libs/{{ chunky_latest.stdout }}{% endif %}",
            dest: "Chunky.jar",
            when: "{{ use_chunky }}",
          }
        - {
            url: "{% if use_bluemap %}{{ bluemap_latest.stdout }}{% endif %}",
            dest: BlueMap.jar,
            when: "{{ use_bluemap }}",
          }
        - {
            url: "{% if use_bluemap %}{{ bluemap_floodgate_latest.stdout }}{% endif %}",
            dest: BlueMapFloodgate.jar,
            when: "{{ use_bluemap }}",
          }
        - {
            url: "{{ tabtps_latest.stdout }}",
            dest: tabtps.jar,
            when: "{{ true }}",
          }
        - {
            url: "{{ floodgateplaceholders_latest.stdout }}",
            dest: PlaceholderAPI/expansions/FloodgatePlaceholders.jar,
            when: "{{ true }}",
          }
        - {
            url: "https://ci.extendedclip.com/job/PlaceholderAPI/lastSuccessfulBuild/artifact/build/libs/{{ placeholderapi_latest.stdout }}",
            dest: PlaceholderAPI.jar,
            when: "{{ true }}",
          }
        - {
            url: "https://ci.lucko.me/job/LuckPerms/lastSuccessfulBuild/artifact/bukkit/loader/build/libs/{{ luckperms_latest.stdout }}",
            dest: LuckPerms.jar,
            when: "{{ true }}",
          }
        - {
            url: "{% if use_viaversion %}{{ viaversion_latest.stdout }}{% endif %}",
            dest: "ViaVersion.jar",
            when: "{{ use_viaversion }}",
          }
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false
        - item.when

    - name: Configuring the LuckPerms users
      template:
        src: templates/java/plugins/LuckPerms/luckperms.yml.j2
        dest: /opt/minecraft/server/plugins/LuckPerms/{% if final_luckperms_overrides['storage-method'] == "json" %}json{% elif final_luckperms_overrides['storage-method'] == "yaml" %}yaml{% endif %}-storage/users/{{ item.name }}.{% if final_luckperms_overrides['storage-method'] == "json" %}json{% elif final_luckperms_overrides['storage-method'] == "yaml" %}yml{% endif %}
      with_items: "{{ final_luckperms_users }}"
      when:
        - final_luckperms_users | length
        - final_luckperms_overrides['storage-method'] == "json" or final_luckperms_overrides['storage-method'] == "yaml"
        - restore_backup == false
        - restore_permissions
        - vanilla == false

    - name: Configuring the LuckPerms groups
      template:
        src: templates/java/plugins/LuckPerms/luckperms.yml.j2
        dest: /opt/minecraft/server/plugins/LuckPerms/{% if final_luckperms_overrides['storage-method'] == "json" %}json{% elif final_luckperms_overrides['storage-method'] == "yaml" %}yaml{% endif %}-storage/groups/{{ item.name }}.{% if final_luckperms_overrides['storage-method'] == "json" %}json{% elif final_luckperms_overrides['storage-method'] == "yaml" %}yml{% endif %}
      with_items: "{{ final_luckperms_groups }}"
      when:
        - final_luckperms_groups | length
        - final_luckperms_overrides['storage-method'] == "json" or final_luckperms_overrides['storage-method'] == "yaml"
        - restore_backup == false
        - restore_permissions
        - vanilla == false

    - name: Downloading the CustomCommandPrefix plugin
      copy:
        src: files/CustomCommandPrefix-1.0.jar
        dest: /opt/minecraft/server/plugins/CustomCommandPrefix.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Configuring the CustomCommandPrefix plugin
      copy:
        content: "prefix: '?'"
        dest: /opt/minecraft/server/plugins/CustomCommandPrefix/config.yml
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - restore_backup == false
        - vanilla == false

    - name: Downloading the LuckPermsChat plugin
      copy:
        src: files/LPC.jar
        dest: /opt/minecraft/server/plugins/LPC.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server or update_server
        - restore_backup == false
        - vanilla == false

    - name: Downloading Bedrock resource packs
      get_url:
        url: "{{ item }}"
        dest: /opt/minecraft/server/plugins/Geyser-Spigot/packs/
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items: "{{ bedrock_resource_packs }}"
      when:
        - bedrock_resource_packs is defined
        - restore_backup == false
        - vanilla == false

    - name: Copying the BlueMap NoOreTexturePack
      copy:
        src: files/BlueMapNoOreTexturePack.zip
        dest: /opt/minecraft/server/plugins/BlueMap/resourcepacks/
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - use_bluemap
        - restore_backup == false
        - vanilla == false

    - name: Removing plugins
      file:
        path: /opt/minecraft/server/plugins/{{ item.src }}
        state: absent
      with_items:
        - { src: BlueMap.jar, when: "{{ use_bluemap == false or vanilla }}" }
        - { src: ../bluemap, when: "{{ use_bluemap == false or vanilla }}" }
        - {
            src: BlueMapFloodgate.jar,
            when: "{{ use_bluemap == false or vanilla }}",
          }
        - { src: Chunky.jar, when: "{{ use_chunky == false or vanilla }}" }
        - { src: CustomCommandPrefix.jar, when: "{{ vanilla }}" }
        - { src: floodgate-spigot.jar, when: "{{ vanilla }}" }
        - { src: Geyser-Spigot.jar, when: "{{ vanilla }}" }
        - { src: tabtps.jar, when: "{{ vanilla }}" }
        - {
            src: ViaVersion.jar,
            when: "{{ use_viaversion == false or vanilla }}",
          }
      when: item.when

    - name: Downloading Jolokia
      maven_artifact:
        group_id: org.jolokia
        artifact_id: jolokia-jvm
        dest: /opt/minecraft/server/jolokia-jvm.jar
        owner: minecraft
        group: minecraft
        mode: 0644

    - name: Downloading the server backup
      command: oci os object get --auth instance_principal --bucket-name {{ bucket_name }} --file minecraft.tar --name minecraft.tar
      args:
        chdir: /opt/minecraft
      when:
        - restore_backup
        - restore_remote_backup

    - name: Restoring the server backup repository
      unarchive:
        src: /opt/minecraft/minecraft.tar
        dest: /opt/minecraft/
        owner: minecraft
        group: minecraft
        mode: u=rwX,g=rX,o=rX
        remote_src: yes
      when:
        - restore_backup
        - restore_remote_backup

    - name: Restoring the server backup
      command: "borg extract /opt/minecraft/backup::{{ backup_version }}"
      args:
        chdir: /opt/minecraft/server
      when: restore_backup

    - name: Removing the downloaded backup
      file:
        path: /opt/minecraft/minecraft.tar
        state: absent

    - name: Copying scripts and systemd units
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.owner }}"
        mode: "{{ item.mode }}"
      with_items:
        - {
            src: "files/scripts/dnf-reboot.sh",
            dest: "/opt/minecraft/dnf-reboot.sh",
            owner: "minecraft",
            mode: "0755",
            when: true,
          }
        - {
            src: "templates/scripts/backup.sh.j2",
            dest: "/opt/minecraft/backup.sh",
            owner: "minecraft",
            mode: "0755",
            when: true,
          }
        - {
            src: "templates/scripts/monitor.py.j2",
            dest: "/opt/minecraft/monitor",
            owner: "minecraft",
            mode: "0744",
            when: true,
          }
        - {
            src: "templates/scripts/chunky-monitor.py.j2",
            dest: "/opt/minecraft/chunky-monitor",
            owner: "minecraft",
            mode: "0744",
            when: "{{ use_chunky }}",
          }
        - {
            src: "files/sudoers",
            dest: "/etc/sudoers.d/10-minecraft-user",
            owner: "root",
            mode: "0440",
            when: true,
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/minecraft.service",
            owner: "root",
            mode: "0644",
            description: "Minecraft Server",
            type: "forking",
            execstartpre: "-/opt/minecraft/server-icon.sh",
            execstart: "/usr/bin/tmux new-session -s minecraft -d '{{ command }}'",
            execstop: "/usr/bin/tmux send-keys -t minecraft stop ENTER",
            workingdirectory: "/opt/minecraft/server",
            user: "minecraft",
            group: "minecraft",
            nice: "-20",
            oomscoreadjust: "-1000",
            when: true,
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/minecraft-backup.service",
            owner: "root",
            mode: "0644",
            description: "Minecraft server backup",
            type: "oneshot",
            execstart: "/opt/minecraft/backup.sh",
            user: "minecraft",
            group: "minecraft",
            when: true,
          }
        - {
            src: "templates/systemd/timer.j2",
            dest: "/etc/systemd/system/minecraft-backup.timer",
            owner: root,
            mode: "0644",
            description: "Minecraft server backup",
            timer: "6:00",
            persistent: true,
            when: true,
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/dnf-upgrade.service",
            owner: "root",
            mode: "0644",
            description: "DNF Upgrade",
            type: "oneshot",
            execstart: "/opt/minecraft/dnf-reboot.sh",
            when: true,
          }
        - {
            src: "templates/systemd/timer.j2",
            dest: "/etc/systemd/system/dnf-upgrade.timer",
            owner: "root",
            mode: "0644",
            description: "DNF Upgrade",
            timer: "Tue 7:00",
            persistent: true,
            when: true,
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/uptrack-upgrade.service",
            owner: "root",
            mode: "0644",
            description: "Uptrack Upgrade",
            type: "oneshot",
            execstart: "/sbin/uptrack-upgrade -y",
            when: true,
          }
        - {
            src: "templates/systemd/timer.j2",
            dest: "/etc/systemd/system/uptrack-upgrade.timer",
            owner: "root",
            mode: "0644",
            description: "Uptrack Upgrade",
            timer: "Mon,Wed..Sun 7:00",
            persistent: true,
            when: true,
          }
        - {
            src: "files/nginx.conf",
            dest: "/etc/nginx/nginx.conf",
            owner: root,
            mode: "0644",
            when: "{{ use_bluemap }}",
          }
        - {
            src: "templates/nginx.conf.j2",
            dest: "/etc/nginx/conf.d/bluemap.conf",
            owner: root,
            mode: "0644",
            certbot_ready: "{{ bluemap_certbot.ready }}",
            when: "{{ use_bluemap }}",
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/certbot-renew.service",
            owner: root,
            mode: "0644",
            description: "CertBot Renewal",
            type: oneshot,
            execstart: "{% if bluemap_certbot is defined %}certbot certonly --nginx -d {{ bluemap_certbot.domain }} -m {{ bluemap_certbot.email }} --agree-tos --no-eff-email --key-type ecdsa -n{% endif %}",
            when: "{{ use_bluemap and bluemap_certbot.use }}",
          }
        - {
            src: "templates/systemd/timer.j2",
            dest: "/etc/systemd/system/certbot-renew.timer",
            owner: root,
            mode: "0644",
            description: "CertBot Renewal",
            timer: "*-1/2-1 00:00:00",
            persistent: true,
            when: "{{ use_bluemap and bluemap_certbot.use }}",
          }
        - {
            src: "templates/scripts/continuous-deployment.sh.j2",
            dest: "/opt/minecraft/continuous-deployment.sh",
            owner: "root",
            mode: "0744",
            when: "{{ continuous_deployment }}",
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/minecraft-continuous-deployment.service",
            owner: root,
            mode: "0644",
            description: "Minecraft continuous deployment",
            type: oneshot,
            execstart: "/opt/minecraft/continuous-deployment.sh",
            user: "minecraft",
            group: "minecraft",
            when: "{{ continuous_deployment }}",
          }
        - {
            src: "templates/systemd/timer.j2",
            dest: "/etc/systemd/system/minecraft-continuous-deployment.timer",
            owner: root,
            mode: "0644",
            description: "Minecraft continuous deployment",
            timer: "8:00",
            persistent: true,
            when: "{{ continuous_deployment }}",
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/minecraft-monitor.service",
            owner: "root",
            mode: "0644",
            description: "Minecraft Monitor",
            execstart: "/opt/minecraft/monitor",
            restart: "on-failure",
            user: "minecraft",
            type: "simple",
            when: true,
          }
        - {
            src: "templates/systemd/service.j2",
            dest: "/etc/systemd/system/chunky-monitor.service",
            owner: "root",
            mode: "0644",
            description: "Chunky Monitor",
            execstart: "/opt/minecraft/chunky-monitor",
            user: "minecraft",
            type: "oneshot",
            when: "{{ use_chunky}}",
          }
        - {
            src: "templates/systemd/timer.j2",
            dest: "/etc/systemd/system/chunky-monitor.timer",
            owner: "root",
            mode: "0644",
            description: "Chunky Monitor",
            timer: "*:*:0",
            when: "{{ use_chunky}}",
          }
        - {
            src: "files/scripts/server-icon.sh",
            dest: "/opt/minecraft/server-icon.sh",
            owner: "minecraft",
            mode: "0755",
            when: "{{ random_server_icon }}",
          }
      when: item.when

    - name: Copying firewall rule
      template:
        src: templates/minecraft.xml.j2
        dest: /etc/firewalld/services/minecraft.xml
        owner: root
        group: root
        mode: 0644
      register: firewall

    - name: Reloading firewalld
      command: firewall-cmd --reload
      when: firewall.changed

    - name: Allowing Minecraft through the firewall
      firewalld:
        service: minecraft
        state: enabled
        permanent: yes
        immediate: yes

    - name: Enabling Certbot
      command: certbot certonly --nginx -d {{ bluemap_certbot.domain }} -m {{ bluemap_certbot.email }} --agree-tos --no-eff-email --key-type ecdsa -n
      when: use_bluemap and bluemap_certbot.use and bluemap_certbot.ready == false

    - name: Updating Bluemap Nginx site
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/conf.d/bluemap.conf
        owner: root
        group: root
        mode: 0644
      with_items:
        - { certbot_ready: true }
      when:
        - use_bluemap
        - (bluemap_certbot.use and bluemap_certbot.ready == false) or bluemap_certbot.use == false

    - name: Stopping and disabling unneeded systemd units
      systemd:
        name: "{{ item.name }}"
        state: stopped
        enabled: false
      with_items:
        - {
            name: chunky-monitor.timer,
            when: "{{ use_chunky == false and ansible_facts.services['chunky-monitor.timer'] is defined }}",
          }
        - {
            name: chunky-monitor.service,
            when: "{{ use_chunky == false and ansible_facts.services['chunky-monitor.service'] is defined }}",
          }
        - {
            name: nginx.service,
            when: "{{ use_bluemap == false and ansible_facts.services['nginx.service'] is defined }}",
          }
      when: item.when

    - name: Removing unneeded systemd units
      file:
        path: /etc/systemd/system/{{ item.path }}
        state: absent
      with_items:
        - { path: chunky-monitor.timer, when: "{{ use_chunky == false }}" }
        - { path: chunky-monitor.service, when: "{{ use_chunky == false }}" }
      when: item.when

    - name: Copying the server icon
      copy:
        src: "{% if random_server_icon == false %}files/java/server-icon.png{% else %}files/java/server-icons{% endif %}"
        dest: /opt/minecraft/server/
        owner: minecraft
        group: minecraft
        mode: 0644
      ignore_errors: yes

    - name: Accepting the Minecraft Server EULA
      copy:
        content: eula=true
        dest: /opt/minecraft/server/eula.txt
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server
        - restore_backup == false
        - eula

    - name: Creating directory for the SELinux module
      file:
        path: /opt/minecraft/selinux
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755

    - name: Copying SELinux module
      template:
        src: templates/selinux.te.j2
        dest: /opt/minecraft/selinux/minecraft.te
        owner: minecraft
        group: minecraft
        mode: 0644
      register: selinux

    - name: Compiling SELinux module
      command: checkmodule -M -m -o minecraft.mod minecraft.te
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Packaging SELinux module
      command: semodule_package -o minecraft.pp -m minecraft.mod
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Loading SELinux module
      command: semodule -i minecraft.pp
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Starting the systemd units
      systemd:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        enabled: "{{ item.enabled }}"
        daemon_reload: yes
      with_items:
        - {
            name: "minecraft.service",
            state: "started",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "minecraft-backup.timer",
            state: "restarted",
            enabled: "true",
            when: "{{ continuous_deployment == false }}",
          }
        - {
            name: "minecraft-continuous-deployment.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ continuous_deployment }}",
          }
        - {
            name: "dnf-upgrade.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "uptrack-upgrade.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "nginx.service",
            state: "started",
            enabled: "yes",
            when: "{{ use_bluemap }}",
          }
        - {
            name: "nginx.service",
            state: "reloaded",
            enabled: "yes",
            when: "{{ use_bluemap }}",
          }
        - {
            name: "certbot-renew.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ use_bluemap and bluemap_certbot.use }}",
          }
        - {
            name: "minecraft-monitor.service",
            state: "restarted",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "chunky-monitor.timer",
            state: "restarted",
            enabled: "true",
            when: "{{ use_chunky }}",
          }
      when: item.when
