# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook.json

- hosts: minecraft

  vars:
    memtotal_b: "{{ ansible_memtotal_mb * 1048576 }}"
    final_server_overrides: "{% if global_overrides.server is defined and overrides.server is defined %}{{ server | combine(global_overrides.server, overrides.server, recursive=True) }}{% elif global_overrides.server is defined %}{{ server | combine(global_overrides.server, recursive=True) }}{% elif overrides.server is defined %}{{ server | combine(overrides.server, recursive=True) }}{% else %}{{ server }}{% endif %}"

  tasks:
    - name: Configuring sshd # Based on https://infosec.mozilla.org/guidelines/openssh and CIS Benchmarks
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^({{ item.regexp }}|#{{ item.regexp }})"
        line: "{{ item.line }}"
      with_items:
        - {
            regexp: "KexAlgorithms",
            line: "KexAlgorithms curve25519-sha256@libssh.org",
          }
        - { regexp: "Ciphers", line: "Ciphers chacha20-poly1305@openssh.com" }
        - {
            regexp: "MACs",
            line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com",
          }
        - {
            regexp: "AuthenticationMethods",
            line: "AuthenticationMethods publickey",
          }
        - { regexp: "LogLevel", line: "LogLevel VERBOSE" }
        - {
            regexp: "Subsystem sftp",
            line: "Subsystem sftp /usr/libexec/openssh/sftp-server -f AUTHPRIV -l INFO",
          }
        - { regexp: "PermitRootLogin", line: "PermitRootLogin no" }
        - {
            regexp: "UsePrivilegeSeparation",
            line: "UsePrivilegeSeparation sandbox",
          }
        - { regexp: "LoginGraceTime", line: "LoginGraceTime 1m" }
        - { regexp: "AllowTcpForwarding", line: "AllowTcpForwarding no" }
        - { regexp: "MaxSessions", line: "MaxSessions 4" }
        - { regexp: "X11Forwarding", line: "X11Forwarding no" }
        - { regexp: "MaxAuthTries", line: "MaxAuthTries 4" }
      register: sshd

    - name: Checking if SSH short moduli needs disabling
      command: awk '{ if ($5 < 3071) { exit 3 } else { exit 0 } }' /etc/ssh/moduli
      changed_when: moduli.rc == 3
      failed_when:
        - moduli.rc != 0
        - moduli.rc != 3
      register: moduli

    - name: Disabling SSH short moduli
      command: awk -i inplace '$5 >= 3071' /etc/ssh/moduli
      when: moduli.changed

    - name: Restarting sshd
      systemd:
        name: sshd
        state: restarted
      when: sshd.changed or moduli.changed

    - name: Stopping the existing server
      systemd:
        name: minecraft
        state: stopped
      when:
        - ansible_facts.services['minecraft.service'] is defined

    - name: Backing up the existing server
      shell: tar cfO - minecraft | oci os object put --auth instance_principal --bucket-name {{ bucket_name }} --file - --name "minecraft.tar" --force
      args:
        chdir: /opt/minecraft
      when:
        - new_server == true or update_server == true
        - skip_backup == false
        - continuous_deployment == false

    - name: Applying updates with Uptrack
      command: uptrack-upgrade -y

    - name: Installing updates
      dnf:
        name: "*"
        state: latest
        update_cache: yes

    - name: Setting the timezone
      timezone:
        name: "{{ timezone }}"

    - name: Installing packages
      dnf:
        name:
          - java-17-openjdk-headless
          - jq
          - python36-oci-cli
          - tmux
        state: present
        update_cache: yes

    - name: Installing mcstatus
      pip:
        name: mcstatus
        state: latest

    - name: Creating the minecraft user
      user:
        name: minecraft
        create_home: yes
        home: /opt/minecraft
        shell: /bin/bash

    - name: Checking if the swapfile exists
      stat:
        path: /.swapfile
      register: swapfile

    - name: Turning off swapfile
      command: swapoff /.swapfile
      changed_when: swapoff.rc == 0
      failed_when:
        - swapoff.rc != 0
        - swapoff.rc != 255
      when: swapfile.stat.exists
      register: swapoff

    - name: Removing swapfile
      file:
        path: /.swapfile
        state: absent
      when: swapfile.stat.exists

    - name: Removing the existing server
      file:
        path: /opt/minecraft/server
        state: absent
      when: new_server == true

    - name: Creating the server directory
      file:
        path: /opt/minecraft/server
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755
      when: new_server == true

    - name: Getting the latest Paper build
      shell: curl --silent https://papermc.io/api/v2/projects/paper/versions/{{ version }} | jq ".builds | max"
      register: paper_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Downloading Minecraft Paper server
      get_url:
        url: https://papermc.io/api/v2/projects/paper/versions/{{ version }}/builds/{{ paper_latest.stdout }}/downloads/paper-{{ version }}-{{ paper_latest.stdout }}.jar
        dest: /opt/minecraft/server/server.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Getting the Minecraft server URL
      shell: curl --silent https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.versions[] | select(.id == "{{ version }}") | .url' | xargs -n 1 curl --silent | jq -r .downloads.server.url
      register: vanilla_url
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == true

    - name: Downloading Minecraft server
      get_url:
        url: "{{ vanilla_url.stdout }}"
        dest: /opt/minecraft/server/server.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == true

    - name: Configuring the Minecraft server
      template:
        src: templates/java/server.properties.j2
        dest: /opt/minecraft/server/server.properties
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - { src: bukkit.yml, when: "{{ vanilla == false }}" }
        - { src: commands.yml, when: "{{ vanilla == false }}" }
        - { src: spigot.yml, when: "{{ vanilla == false }}" }
        - { src: paper.yml, when: "{{ vanilla == false }}" }
        - { src: plugins/Chunky/config.yml, when: "{{ use_chunky == true and vanilla == false }}" }
        - { src: plugins/floodgate/config.yml, when: "{{ vanilla == false }}" }
        - { src: plugins/Geyser-Spigot/config.yml, when: "{{ vanilla == false }}" }
        - {
            src: plugins/ViaVersion/config.yml,
            when: "{{ use_viaversion == true and vanilla == false }}",
          }
      when:
        - restore_backup == false
        - item.when == true

    - name: Creating the plugin directories
      file:
        path: /opt/minecraft/server/plugins/{{ item.path }}
        state: "{{ item.state }}"
        owner: minecraft
        group: minecraft
        mode: 0755
      with_items:
        - {
            path: Chunky,
            state: "{% if use_chunky == true %}directory{% else %}absent{% endif %}",
          }
        - { path: CustomCommandPrefix, state: directory }
        - { path: floodgate, state: directory }
        - { path: Geyser-Spigot/packs, state: directory }
        - {
            path: ViaVersion,
            state: "{% if use_viaversion == true %}directory{% else %}absent{% endif %}",
          }
      when:
        - restore_backup == false
        - vanilla == false

    - name: Copying the server permissions files
      copy:
        src: files/java/{{ item }}.json
        dest: /opt/minecraft/server/
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - ops
        - whitelist
      when:
        - restore_permissions == true
        - restore_backup == false

    - name: Getting the latest Chunky release
      shell: curl --silent https://ci.codemc.io/job/pop4959/job/Chunky/lastSuccessfulBuild/api/json | jq -r '.artifacts[0].fileName'
      register: chunky_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false
        - use_chunky == true

    - name: Getting the latest ViaVersion release
      shell: curl --silent "https://api.github.com/repos/ViaVersion/ViaVersion/releases/latest" | jq -r '.assets[].browser_download_url'
      register: viaversion_latest
      when:
        - new_server == true or update_server == true
        - use_viaversion == true
        - restore_backup == false
        - vanilla == false

    - name: Getting the latest TabTPS release
      shell: curl --silent https://api.github.com/repos/jpenilla/TabTPS/releases/latest | jq -r '.assets[].browser_download_url | select(contains("spigot"))'
      register: tabtps_latest
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Downloading plugins
      get_url:
        url: "{{ item.url }}"
        dest: /opt/minecraft/server/plugins/{{ item.dest }}
        owner: minecraft
        group: minecraft
        mode: 0644
      with_items:
        - {
            url: https://ci.opencollab.dev/job/GeyserMC/job/Geyser/job/master/lastSuccessfulBuild/artifact/bootstrap/spigot/target/Geyser-Spigot.jar,
            dest: Geyser-Spigot.jar,
            when: "{{ true }}",
          }
        - {
            url: https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/lastSuccessfulBuild/artifact/spigot/target/floodgate-spigot.jar,
            dest: floodgate-spigot.jar,
            when: "{{ true }}",
          }
        - {
            url: https://ci.opencollab.dev/job/GeyserMC/job/GeyserOptionalPack/job/master/lastSuccessfulBuild/artifact/GeyserOptionalPack.mcpack,
            dest: Geyser-Spigot/packs/,
            when: "{{ true }}",
          }
        - {
            url: "{% if use_chunky == true %}https://ci.codemc.io/view/Author/job/pop4959/job/Chunky/lastSuccessfulBuild/artifact/bukkit/build/libs/{{ chunky_latest.stdout }}{% endif %}",
            dest: "Chunky.jar",
            when: "{{ use_chunky == true }}",
          }
        - {
            url: "{{ tabtps_latest.stdout }}",
            dest: tabtps.jar,
            when: "{{ true }}",
          }
        - {
            url: "{% if use_viaversion == true %}{{ viaversion_latest.stdout }}{% endif %}",
            dest: "ViaVersion.jar",
            when: "{{ use_viaversion == true }}",
          }
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false
        - item.when == true

    - name: Downloading the CustomCommandPrefix plugin
      copy:
        src: files/CustomCommandPrefix-1.0.jar
        dest: /opt/minecraft/server/plugins/CustomCommandPrefix.jar
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true or update_server == true
        - restore_backup == false
        - vanilla == false

    - name: Configuring the CustomCommandPrefix plugin
      copy:
        content: "prefix: '?'"
        dest: /opt/minecraft/server/plugins/CustomCommandPrefix/config.yml
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - restore_backup == false
        - vanilla == false

    - name: Downloading Jolokia
      maven_artifact:
        group_id: org.jolokia
        artifact_id: jolokia-jvm
        dest: /opt/minecraft/server/jolokia-jvm.jar
        owner: minecraft
        group: minecraft
        mode: 0644

    - name: Downloading the server backup
      command: oci os object get --auth instance_principal --bucket-name {{ bucket_name }} --file minecraft.tar --name minecraft.tar{%if backup_version is defined %} --version-id {{ backup_version }}{% endif %}
      args:
        chdir: /opt/minecraft
      when: restore_backup == true

    - name: Restoring the server backup
      unarchive:
        src: /opt/minecraft/minecraft.tar
        dest: /opt/minecraft/
        owner: minecraft
        group: minecraft
        mode: u=rwX,g=rX,o=rX
        remote_src: yes
      when: restore_backup == true

    - name: Removing the downloaded backup
      file:
        path: /opt/minecraft/server.tar
        state: absent
      when: restore_backup == true

    - name: Copying scripts and systemd units
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.owner }}"
        mode: "{{ item.mode }}"
      with_items:
        - {
            src: "files/scripts/dnf-reboot.sh",
            dest: "/opt/minecraft/dnf-reboot.sh",
            owner: "minecraft",
            mode: "0755",
            when: true,
          }
        - {
            src: "templates/scripts/backup.sh.j2",
            dest: "/opt/minecraft/backup.sh",
            owner: "minecraft",
            mode: "0755",
            when: true,
          }
        - {
            src: "templates/scripts/monitor.py.j2",
            dest: "/opt/minecraft/monitor",
            owner: "minecraft",
            mode: "0744",
            when: true,
          }
        - {
            src: "templates/scripts/chunky-monitor.py.j2",
            dest: "/opt/minecraft/chunky-monitor",
            owner: "minecraft",
            mode: "0744",
            when: "{{ use_chunky == true }}",
          }
        - {
            src: "templates/systemd/minecraft.service.j2",
            dest: "/etc/systemd/system/minecraft.service",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "files/systemd/minecraft-backup.service.j2",
            dest: "/etc/systemd/system/minecraft-backup.service",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "files/systemd/minecraft-backup.timer.j2",
            dest: "/etc/systemd/system/minecraft-backup.timer",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "files/systemd/dnf-upgrade.service",
            dest: "/etc/systemd/system/dnf-upgrade.service",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "files/systemd/dnf-upgrade.timer",
            dest: "/etc/systemd/system/dnf-upgrade.timer",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "files/systemd/uptrack-upgrade.service",
            dest: "/etc/systemd/system/uptrack-upgrade.service",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "files/systemd/uptrack-upgrade.timer",
            dest: "/etc/systemd/system/uptrack-upgrade.timer",
            owner: "root",
            mode: "0644",
            when: true,
          }
        - {
            src: "templates/scripts/continuous-deployment.sh.j2",
            dest: "/opt/minecraft/continuous-deployment.sh",
            owner: "root",
            mode: "0744",
            when: "{{ continuous_deployment == true }}",
          }
        - {
            src: "files/systemd/minecraft-continuous-deployment.service",
            dest: "/etc/systemd/system/minecraft-continuous-deployment.service",
            owner: "root",
            mode: "0744",
            when: "{{ continuous_deployment == true }}",
          }
        - {
            src: "files/systemd/minecraft-continuous-deployment.timer",
            dest: "/etc/systemd/system/minecraft-continuous-deployment.timer",
            owner: "root",
            mode: "0744",
            when: "{{ continuous_deployment == true }}",
          }
        - {
            src: "templates/systemd/monitor.service.j2",
            dest: "/etc/systemd/system/minecraft-monitor.service",
            owner: "root",
            mode: "0644",
            description: "Minecraft Monitor",
            execstart: "monitor",
            restart: "on-failure",
            user: "minecraft",
            type: "simple",
            when: true,
          }
        - {
            src: "templates/systemd/monitor.service.j2",
            dest: "/etc/systemd/system/chunky-monitor.service",
            owner: "root",
            mode: "0644",
            description: "Chunky Monitor",
            execstart: "chunky-monitor",
            user: "minecraft",
            type: "oneshot",
            when: "{{ use_chunky == true}}",
          }
        - {
            src: "templates/systemd/monitor.timer.j2",
            dest: "/etc/systemd/system/chunky-monitor.timer",
            owner: "root",
            mode: "0644",
            description: "Chunky Monitor",
            timer: "*:*:0",
            when: "{{ use_chunky == true}}",
          }
      when: item.when == true

    - name: Stopping and disabling unneeded systemd units
      systemd:
        name: "{{ item.name }}"
        state: stopped
        enabled: false
      with_items:
        - { name: chunky-monitor.timer, when: "{{ use_chunky == false and ansible_facts.services['chunky-monitor.timer'] is defined }}" }
        - { name: chunky-monitor.service, when: "{{ use_chunky == false }} and ansible_facts.services['chunky-monitor.service'] is defined" }
      when: item.when == true

    - name: Removing unneeded systemd units
      file:
        path: /etc/systemd/system/{{ item.path }}
        state: absent
      with_items:
        - { path: chunky-monitor.timer, when: "{{ use_chunky == false }}" }
        - { path: chunky-monitor.service, when: "{{ use_chunky == false }}" }
      when: item.when == true

    - name: Accepting the Minecraft Server EULA
      copy:
        content: eula=true
        dest: /opt/minecraft/server/eula.txt
        owner: minecraft
        group: minecraft
        mode: 0644
      when:
        - new_server == true
        - restore_backup == false
        - eula == true

    - name: Copying firewall rule
      template:
        src: templates/minecraft.xml.j2
        dest: /etc/firewalld/services/minecraft.xml
        owner: root
        group: root
        mode: 0644
      register: firewall

    - name: Reloading firewalld
      command: firewall-cmd --reload
      when: firewall.changed

    - name: Allowing Minecraft through the firewall
      firewalld:
        service: minecraft
        state: enabled
        permanent: yes
        immediate: yes

    - name: Creating directory for the SELinux module
      file:
        path: /opt/minecraft/selinux
        state: directory
        owner: minecraft
        group: minecraft
        mode: 0755

    - name: Copying SELinux module
      copy:
        src: files/minecraft.te
        dest: /opt/minecraft/selinux/
        owner: minecraft
        group: minecraft
        mode: 0644
      register: selinux

    - name: Compiling SELinux module
      command: checkmodule -M -m -o minecraft.mod minecraft.te
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Packaging SELinux module
      command: semodule_package -o minecraft.pp -m minecraft.mod
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Loading SELinux module
      command: semodule -i minecraft.pp
      args:
        chdir: /opt/minecraft/selinux
      when: selinux.changed

    - name: Starting the systemd units
      systemd:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        enabled: "{{ item.enabled }}"
        daemon_reload: yes
      with_items:
        - {
            name: "minecraft.service",
            state: "started",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "minecraft-backup.timer",
            state: "restarted",
            enabled: "true",
            when: "{{ continuous_deployment == false }}",
          }
        - {
            name: "minecraft-continuous-deployment.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ continuous_deployment == true }}",
          }
        - {
            name: "dnf-upgrade.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "uptrack-upgrade.timer",
            state: "restarted",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "minecraft-monitor.service",
            state: "restarted",
            enabled: "yes",
            when: "{{ true }}",
          }
        - {
            name: "chunky-monitor.timer",
            state: "restarted",
            enabled: "true",
            when: "{{ use_chunky == true }}",
          }
      when: item.when == true
