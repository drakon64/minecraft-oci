# yaml-language-server: $schema=https://json.schemastore.org/ansible-playbook.json

- hosts: minecraft

  vars:
    memtotal_b: "{{ ansible_memtotal_mb * 1048576 }}"

  vars_files:
    - ../vars/bukkit.yml
    - ../vars/chunky.yml
    - ../vars/commands.yml
    - ../vars/floodgate.yml
    - ../vars/geyser.yml
    - ../vars/harbor.yml
    - ../vars/luckperms.yml
    - ../vars/minimotd.yml
    - ../vars/paper.yml
    - ../vars/pufferfish.yml
    - ../vars/purpur.yml
    - ../vars/server.yml
    - ../vars/spigot.yml
    - ../vars/viaversion.yml
    - ../vars/worldedit.yml
    - ../vars/worldguard.yml

  tasks:
    - name: Configuring sshd # Based on https://infosec.mozilla.org/guidelines/openssh and CIS Benchmarks
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^({{ item.regexp }}|#{{ item.regexp }})"
        line: "{{ item.line }}"
      loop:
        - {
          regexp: "KexAlgorithms",
          line: "KexAlgorithms curve25519-sha256@libssh.org",
        }
        - { regexp: "Ciphers", line: "Ciphers chacha20-poly1305@openssh.com" }
        - {
          regexp: "MACs",
          line: "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com",
        }
        - {
          regexp: "AuthenticationMethods",
          line: "AuthenticationMethods publickey",
        }
        - { regexp: "LogLevel", line: "LogLevel VERBOSE" }
        - {
          regexp: "Subsystem sftp",
          line: "Subsystem sftp /usr/libexec/openssh/sftp-server -f AUTHPRIV -l INFO",
        }
        - { regexp: "PermitRootLogin", line: "PermitRootLogin no" }
        - {
          regexp: "UsePrivilegeSeparation",
          line: "UsePrivilegeSeparation sandbox",
        }
        - { regexp: "LoginGraceTime", line: "LoginGraceTime 1m" }
        - { regexp: "AllowTcpForwarding", line: "AllowTcpForwarding no" }
        - { regexp: "MaxSessions", line: "MaxSessions 4" }
        - { regexp: "X11Forwarding", line: "X11Forwarding no" }
        - { regexp: "MaxAuthTries", line: "MaxAuthTries 4" }
      register: sshd

    - name: Checking if SSH short moduli needs disabling
      command: awk '{ if ($5 < 3071) { exit 3 } else { exit 0 } }' /etc/ssh/moduli
      changed_when: moduli.rc == 3
      failed_when:
        - moduli.rc != 0
        - moduli.rc != 3
      register: moduli

    - name: Disabling SSH short moduli
      command: awk -i inplace '$5 >= 3071' /etc/ssh/moduli
      when: moduli.changed

    - name: Restarting sshd
      systemd:
        name: sshd
        state: restarted
      when: sshd.changed or moduli.changed

    - name: Stopping the existing instances
      systemd:
        name: minecraft-{{ item.name }}
        state: stopped
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes # todo: fix this

    - name: Unmounting Borg snapshots
      systemd:
        name: minecraft-backup-mount@{{ item.name }}
        state: stopped
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      ignore_errors: yes # todo: fix this

    - name: Backing up the existing server
      shell: /opt/minecraft/backup.sh {{ item.name }}
      args:
        chdir: /opt/minecraft
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.state.new_server or item.state.update_server
        - item.state.skip_backup == false

    - name: Applying updates with Uptrack
      command: uptrack-upgrade -y

    - name: Enabling EPEL
      yum_repository:
        name: ol8_developer_EPEL
        baseurl: https://yum$ociregion.$ocidomain/repo/OracleLinux/OL8/developer/EPEL/$basearch/
        description: Oracle Linux $releasever EPEL Packages for Development ($basearch)
        gpgcheck: yes
        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        enabled: yes
        file: oracle-epel-ol8

    - name: Installing updates
      dnf:
        name: "*"
        state: latest
        update_cache: yes

    - name: Setting the timezone
      timezone:
        name: "{{ timezone }}"

    - name: Installing packages
      dnf:
        name:
          - git
          - jq
          - borgbackup
          - python36-oci-cli
          - tmux
        state: present
        update_cache: yes

    - name: Installing Java
      dnf:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        update_cache: yes
      loop:
        - {
          name: "java-17-openjdk",
          state: "{% if graalvm %}absent{% else %}present{% endif %}",
        }
        - {
          name: "graalvm22-ee-17-jdk",
          state: "{% if graalvm %}present{% else %}absent{% endif %}",
        }

    - name: Creating the instance user
      user:
        name: minecraft-{{ item.name }}
        create_home: yes
        home: /opt/minecraft/{{ item.name }}
        shell: /bin/bash
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Setting permissions for the Minecraft directory
      file:
        path: /opt/minecraft
        owner: root
        group: root
        mode: u=rwX,g=rX,o=rX
        state: directory

    - name: Checking the size of the swapfile
      stat:
        path: /.swapfile
      register: swapfile

    - name: Turning off swapfile
      command: swapoff /.swapfile
      changed_when: swapoff.rc == 0
      failed_when:
        - swapoff.rc != 0
        - swapoff.rc != 255
      when: swapfile.stat.size != memtotal_b
      register: swapoff

    - name: Removing the existing swapfile
      file:
        path: /.swapfile
        state: absent
      when: swapfile.stat.size != memtotal_b

    - name: Creating swapfile to match system memory
      command: fallocate -l {{ memtotal_b }} /.swapfile
      when: swapfile.stat.size != memtotal_b

    - name: Setting permissions for the swapfile
      file:
        path: /.swapfile
        owner: root
        group: root
        mode: 0600

    - name: Formatting swapfile
      command: mkswap /.swapfile
      when: swapfile.stat.size != memtotal_b

    - name: Changing vm.swappiness to 1 # Oracle Linux recommendation for SSD's
      sysctl:
        name: vm.swappiness
        value: 1
        reload: yes

    - name: Turning on swapfile
      command: swapon /.swapfile
      when: swapfile.stat.size != memtotal_b

    - name: Removing the existing server
      file:
        path: /opt/minecraft/{{ item.name }}/server
        state: absent
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.new_server or item.state.backup.restore_backup

    - name: Restoring permissions for the instance directory
      file:
        path: /opt/minecraft/{{ item.name }}/
        state: directory
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: u=rwX,g=rX,o=rX
        recurse: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Creating the instance directory
      file:
        path: /opt/minecraft/{{ item.name }}/server
        state: directory
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: u=rwX,g=rX,o=rX
        recurse: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Removing the existing backup repository
      file:
        path: /opt/minecraft/{{ item.name }}/backup
        state: absent
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.backup.new_repository

    - name: Creating the instance backup directory
      file:
        path: /opt/minecraft/{{ item.name }}/backup
        state: directory
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: 0755
        recurse: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.state.backup.restore_backup == false

    - name: Initialising the instance backup repository
      command: borg init -e none /opt/minecraft/{{ item.name }}/backup
      changed_when: borg.rc == 0
      failed_when:
        - borg.rc != 0
        - borg.rc != 2
      register: borg
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.state.backup.restore_backup == false
      become_user: minecraft-{{ item.name }}

    - name: Setting the instance backup retention policy
      copy:
        content: "{{ item.state.backup.backup_retention_days }}"
        dest: /opt/minecraft/{{ item.name }}/backup_retention_days
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: 0644
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Creating the instance backup mount point
      file:
        path: /opt/minecraft/{{ item.name }}/snapshot
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: 0755
        state: directory
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Opening the backup repository once
      shell: BORG_UNKNOWN_UNENCRYPTED_REPO_ACCESS_IS_OK=yes borg list /opt/minecraft/{{ item.name }}/backup
      become_user: minecraft-{{ item.name }}
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.backup.new_repository

    - name: Opening the backup repository once as root
      shell: BORG_UNKNOWN_UNENCRYPTED_REPO_ACCESS_IS_OK=yes borg list /opt/minecraft/{{ item.name }}/backup
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.backup.new_repository

    - name: Creating the plugin directories
      include_tasks: plugin-directories.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Configuring the Minecraft server
      include_tasks: server-config.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Downloading plugins
      include_tasks: plugin-download.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Configuring LuckPerms permissions
      include_tasks: luckperms.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Downloading the CustomCommandPrefix plugin
      copy:
        src: ../files/CustomCommandPrefix-1.0.jar
        dest: /opt/minecraft/{{ item.name }}/server/plugins/CustomCommandPrefix.jar
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: 0644
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.state.new_server or item.state.update_server
        - item.geyser
        - item.state.backup.restore_backup == false

    - name: Configuring the CustomCommandPrefix plugin
      copy:
        content: "prefix: '?'"
        dest: /opt/minecraft/{{ item.name }}/server/plugins/CustomCommandPrefix/config.yml
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: 0644
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.geyser
        - item.state.backup.restore_backup == false

    - name: Downloading Bedrock resource packs
      include_tasks: bedrock-rp.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Copying the server icon
      copy:
        src: ../files/java/{{ item.name }}/server-icon.png
        dest: /opt/minecraft/{{ item.name }}/server/
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: u=rwX,g=rX,o=rX
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.server_icon.use
        - item.server_icon.minimotd == false
        - item.state.backup.restore_backup == false

    - name: Copying the server icons for MiniMOTD
      copy:
        src: ../files/java/{{ item.name }}/server-icons/
        dest: /opt/minecraft/{{ item.name }}/server/plugins/MiniMOTD/icons
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: u=rwX,g=rX,o=rX
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.server_icon.use
        - item.server_icon.minimotd
        - item.state.backup.restore_backup == false

    - name: Restoring backup
      include_tasks: restore-backup.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Copying scripts and systemd units
      template:
        src: "../{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ item.owner }}"
        group: "{{ item.owner }}"
        mode: "{{ item.mode }}"
        validate: "{{ item.validate | default(omit) }}"
      loop:
        - {
          src: "templates/scripts/dnf-reboot.sh.j2",
          dest: "/opt/minecraft/dnf-reboot.sh",
          owner: "root",
          mode: "0744",
          when: true,
        }
        - {
          src: "files/scripts/stop.sh",
          dest: "/opt/minecraft/stop.sh",
          owner: "root",
          mode: "0755",
          when: true,
        }
        - {
          src: "templates/scripts/backup.sh.j2",
          dest: "/opt/minecraft/backup.sh",
          owner: "root",
          mode: "0755",
          when: true,
        }
        - {
          src: "templates/systemd/service.j2",
          dest: "/etc/systemd/system/minecraft-backup@.service",
          owner: "root",
          mode: "0644",
          description: "Minecraft Server backup - %i",
          type: "oneshot",
          execstart: "/opt/minecraft/backup.sh %i",
          workingdirectory: "/opt/minecraft",
          user: "minecraft-%i",
          timeoutstartsec: "{{ backup.timeout }}",
          when: true,
        }
        - {
          src: "templates/systemd/timer.j2",
          dest: "/etc/systemd/system/minecraft-backup@.timer",
          owner: "root",
          mode: "0644",
          description: "Minecraft Server backup - %i",
          timer: "{{ backup.oncalendar }}",
          persistent: true,
          when: true,
        }
        - {
          src: "templates/systemd/service.j2",
          dest: "/etc/systemd/system/minecraft-backup-mount@.service",
          owner: "root",
          mode: "0644",
          description: "Minecraft Server snapshot mount - %i",
          type: "simple",
          execstart: "borg mount -f /opt/minecraft/%i/backup /opt/minecraft/%i/snapshot",
          execstop: borg umount /opt/minecraft/%i/snapshot,
          workingdirectory: "/opt/minecraft",
          user: "minecraft-%i",
          when: true,
        }
        - {
          src: "templates/sudoers.j2",
          dest: "/etc/sudoers.d/10-minecraft-users",
          owner: "root",
          mode: "0400",
          when: true,
          validate: "visudo -cf %s",
        }
        - {
          src: "templates/systemd/service.j2",
          dest: "/etc/systemd/system/dnf-upgrade.service",
          owner: "root",
          mode: "0644",
          description: "DNF Upgrade",
          type: "oneshot",
          execstart: "/opt/minecraft/dnf-reboot.sh",
          when: true,
        }
        - {
          src: "templates/systemd/timer.j2",
          dest: "/etc/systemd/system/dnf-upgrade.timer",
          owner: "root",
          mode: "0644",
          description: "DNF Upgrade",
          timer: "Tue 7:00",
          persistent: true,
          when: true,
        }
      when: item.when

    - name: Copying systemd services
      include_tasks: systemd.yml
      loop: "{{ instances }}"
      loop_control:
        loop_var: outer_item
        label: "{{ outer_item.name }}"

    - name: Copying firewall rule
      template:
        src: ../templates/minecraft.xml.j2
        dest: /etc/firewalld/services/minecraft.xml
        owner: root
        group: root
        mode: 0644
      register: firewall

    - name: Reloading firewalld
      command: firewall-cmd --reload
      when: firewall.changed

    - name: Allowing Minecraft through the firewall
      firewalld:
        service: minecraft
        state: enabled
        permanent: yes
        immediate: yes

    - name: Accepting the Minecraft Server EULA
      copy:
        content: eula=true
        dest: /opt/minecraft/{{ item.name }}/server/eula.txt
        owner: minecraft-{{ item.name }}
        group: minecraft-{{ item.name }}
        mode: 0644
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"

#    - name: Creating directory for the SELinux module
#      file:
#        path: /opt/minecraft/selinux
#        state: directory
#        owner: root
#        group: root
#        mode: 0755
#
#    - name: Copying SELinux module
#      template:
#        src: ../templates/selinux.te.j2
#        dest: /opt/minecraft/selinux/minecraft.te
#        owner: root
#        group: root
#        mode: 0644
#      register: selinux
#
#    - name: Compiling SELinux module
#      command: checkmodule -M -m -o minecraft.mod minecraft.te
#      args:
#        chdir: /opt/minecraft/selinux
#      when: selinux.changed
#
#    - name: Packaging SELinux module
#      command: semodule_package -o minecraft.pp -m minecraft.mod
#      args:
#        chdir: /opt/minecraft/selinux
#      when: selinux.changed
#
#    - name: Loading SELinux module
#      command: semodule -i minecraft.pp
#      args:
#        chdir: /opt/minecraft/selinux
#      when: selinux.changed

    - name: Starting the `dnf-upgrade` timer
      systemd:
        name: dnf-upgrade.timer
        state: restarted
        enabled: true
        daemon_reload: true

    - name: Disabling the Minecraft instances
      systemd:
        name: minecraft-{{ item.name }}
        state: stopped
        enabled: no
        daemon_reload: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.enabled == false

    - name: Starting the Minecraft instances
      systemd:
        name: minecraft-{{ item.name }}
        state: started
        enabled: yes
        daemon_reload: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.enabled

    - name: Stopping the Minecraft backup timers
      systemd:
        name: minecraft-backup@{{ item.name }}.timer
        state: stopped
        enabled: no
        daemon_reload: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.state.enabled == false

    - name: Starting the Minecraft backup timers
      systemd:
        name: minecraft-backup@{{ item.name }}.timer
        state: "{% if item.state.enabled %}started{% else %}stopped{% endif %}"
        enabled: "{% if item.state.enabled %}yes{% else %}no{% endif %}"
        daemon_reload: yes
      loop: "{{ instances }}"
      loop_control:
        label: "{{ item.name }}"
